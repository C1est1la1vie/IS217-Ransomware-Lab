import time
from alipay import AliPay
from PIL import Image
#
app_private_key_string = open("./alipay_trade/keys/app_private_key.pem").read()
ali_public_key_string = open("./alipay_trade/keys/ali_public_key.pem").read()
app_id_string = "2016102300746854"

class tradeManager(AliPay):
    """Generate precreate QR code."""

    def __init__(self):
        super(tradeManager, self).__init__(
            appid=app_id_string,
            app_notify_url=None,
            app_private_key_string=app_private_key_string,
            alipay_public_key_string=ali_public_key_string,
            sign_type="RSA2",
            debug=True
        )

    def _new_trade(self, amount, out_trade_no=None):
        """NOTE: QR code urls generated by alipay_trade_precreate API
        live only 2 hours."""
        self.out_trade_no = out_trade_no
        self.trade_dict = self.api_alipay_trade_precreate(
            subject="trade generate new trade",
            out_trade_no=out_trade_no,
            total_amount=amount
        )

    def _gen_qrcode(self, save_path):
        import qrcode
        url = self.trade_dict['qr_code']
        img = qrcode.make(url)

        if save_path:
            with open(save_path, 'wb') as f:
                img.save(f)
            f.close()
            # tmp_img = Image.open(save_path)
            # tmp_img.show()
        return img

    def gen_trade(self, amount, out_trade_no=None):
        """Generate a new trade and save QR code.
        Trade number and image name are auto set as current time.
        Args:
            amount: trade amount
            out_trade_no: trade number
        Return:
            img: generated QR code pillow image
            out_trade_no: trade number, default current time
        """
        if out_trade_no is None:
            out_trade_no = time.strftime("%Y%m%d%H%M%S", time.gmtime())

        self._new_trade(amount=amount, out_trade_no=out_trade_no)
        self.save_path = r"C:\Users\Administrator\Desktop\virus_c&s" + "\\" + out_trade_no + '.png'
        img = self._gen_qrcode(save_path=(out_trade_no + '.png'))
        return img, out_trade_no

    def paid_query(self, out_trade_no=None):
        """Verify if trade paid by using query API.
        Args:
            out_trade_no: trade number
        Return:
            paid: if trade is paid
        """
        if out_trade_no is None:
            out_trade_no = self.out_trade_no
        result = self.api_alipay_trade_query(out_trade_no=out_trade_no)
        if result.get("trade_status", "") == "TRADE_SUCCESS":
            return True
        return False

    def del_trade(self, out_trade_no=None):
        if out_trade_no is None:
            out_trade_no = self.out_trade_no
        self.api_alipay_trade_cancel(out_trade_no=out_trade_no)

    # def _watch_and_cancel(self):
    #     """Debug use only.
    #     Watch trade for 30s then cancel it.
    #     """
    #     paid = False
    #     for i in range(3600):
    #         time.sleep(2)
    #         if self.paid_query():
    #             paid = True
    #             print("paid!")
    #             self.sk.sendall(bytes("2", "utf-8"))
    #             break
    #         print("not paid...")
    #
    #     # order is not paid in 30s , cancel this order
    #     if paid is False:
    #         self.del_trade()
    #         print("trade closed")

if __name__ == '__main__':
    trade = tradeManager()
    img, num = trade.gen_trade(1.)
    trade._watch_and_cancel()
